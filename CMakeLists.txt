cmake_minimum_required(VERSION 3.0.0)
project(TinyMPC VERSION 0.2.0 LANGUAGES CXX)

option(USE_PK "Build for use with the RISCV Proxy Kernel" OFF)
option(USE_CPU "Use CPU implementation" OFF)
option(USE_GEMMINI "Use Gemmini implementation" OFF)
option(USE_RVV "Use RISCV vector extension implementation" ON)
option(MEMORY "Use Memory Optimizations" ON)
option(UNROLLED "Use Unrolling Optimizations" ON)
option(OPTIMIZED "Use Extra Optimizations" ON)
option(MEASURE_CYCLES "Measure Cycles" OFF)

set(RISCV_DIR $ENV{RISCV})
# set(SPECS_FILE "${RISCV_DIR}/riscv64-unknown-elf/lib/htif_nano.specs")
set(WRAP_SPECS_FILE "${RISCV_DIR}/riscv64-unknown-elf/lib/htif_wrap.specs")
set(SPECS_FILE "${RISCV_DIR}/riscv64-unknown-elf/lib/htif_nano.specs")
# set(SPECS_FILE "${RISCV_DIR}/riscv64-unknown-elf/lib/htif.specs")
set(LIBGLOSS_DIR "${RISCV_DIR}/riscv64-unknown-elf/lib/")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(USE_CPU)
    add_compile_definitions(USE_CPU=1)
endif(USE_CPU)
if(USE_GEMMINI)
    add_compile_definitions(USE_GEMMINI=1)
endif(USE_GEMMINI)
if(USE_RVV)
   add_compile_definitions(USE_RVV=1)
endif(USE_RVV)
if(MEMORY)
    add_compile_definitions(MEMORY=1)
endif(MEMORY)
if(UNROLLED)
    add_compile_definitions(UNROLLED=1)
endif(UNROLLED)
if(OPTIMIZED)
    add_compile_definitions(OPTIMIZED=1)
endif(OPTIMIZED)
if(MEASURE_CYCLES)
    add_compile_definitions(MEASURE_CYCLES=1)
endif(MEASURE_CYCLES)

# if (USE_PK)
# else ()
#     link_directories(/scratch/control/chipyard-secret/.conda-env/riscv-tools/riscv64-unknown-elf/lib/)
# endif(USE_PK)

# Add optimization flags
set(CMAKE_BUILD_TYPE Debug)
set(BUILD_SHARED_LIBS OFF)
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
set(CMAKE_CXX_FLAGS_DEBUG  "${CMAKE_CXX_FLAGS_DEBUG} -Og")
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=rv64gcv_zfh -mabi=lp64d -fno-common -fno-builtin-printf -fPIC")

if(USE_PK)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-common -fno-builtin-printf")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -mcmodel=medany -march=rv64gcv_zfh -mabi=lp64d -fno-common -fno-builtin-printf")
    # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -mcmodel=medany -march=rv64gcv -mabi=lp64d -fno-common -fno-builtin-printf")
endif(USE_PK)

set(STATIC_LINKING TRUE)
if(USE_PK)
    set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++")
else()
    # set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++")
    # set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++ -L${LIBGLOSS_DIR} -specs=${SPECS_FILE} -T ${CMAKE_SOURCE_DIR}/htif.ld")
    # set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++ -Wl,-Map=output.map -L${LIBGLOSS_DIR} -specs=${SPECS_FILE} -T ${CMAKE_SOURCE_DIR}/htif.ld")
    set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++ -L${LIBGLOSS_DIR} -specs=${SPECS_FILE} -specs=${WRAP_SPECS_FILE} -T ${CMAKE_SOURCE_DIR}/htif.ld")
endif(USE_PK)

# set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++ -L${LIBGLOSS_DIR} -specs=${SPECS_FILE} -T ${CMAKE_SOURCE_DIR}/htif.ld")
# set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++ -specs=htif_nano.specs -T ${CMAKE_SOURCE_DIR}/htif.ld")
# riscv64-unknown-elf-g++ -I./env -I./common -I./vec-sgemm -I./vec-sgemm-v2 -I./vec-sgemm-v3 -I./vec-sgemv -I./vec-sep-conv-3 -I./vec-slide-conv -I./vec-transpose-store -I./vec-transpose-load -I./vec-conditional -I./vec-div-approx -I./vec-mixed_width_mask -I./vec-square-root-approx -DPREALLOCATE=1 -mcmodel=medany -static -O2 -g -ffast-math -fno-common -fno-builtin-printf -fno-tree-loop-distribute-patterns -march=rv64gcv_zfh -mabi=lp64d -std=c++17 -specs=htif_nano.specs -I./utasks -o vec-tasks.riscv ./vec-tasks/vec-tasks_main.cc

# set(CMAKE_CXX_COMPILER riscv64-unknown-elf-g++)
if(USE_PK)
    set(CMAKE_CXX_COMPILER riscv64-unknown-linux-gnu-g++)
else()
    set(CMAKE_CXX_COMPILER riscv64-unknown-elf-g++)
endif(USE_PK)
# set(CMAKE_CXX_COMPILER /scratch/widyadewi/riscv-tools/bin/riscv64-unknown-elf-g++)

include_directories(include/Eigen)
include_directories(include/Gemmini)
include_directories(include/RoSE)
include_directories(include/matlib)
include_directories(include/tinympc)
add_subdirectory(src)
add_subdirectory(examples)
# add_subdirectory(test)
