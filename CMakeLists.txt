cmake_minimum_required(VERSION 3.0.0)
project(TinyMPC VERSION 0.2.0 LANGUAGES CXX)

option(USE_PK "Build for use with the RISCV Proxy Kernel" OFF)
option(USE_CPU "Use CPU implementation" OFF)
option(USE_GEMMINI "Use Gemmini implementation" OFF)
option(USE_RVV "Use RISCV vector extension implementation" ON)
option(MEMORY "Use Memory Optimizations" ON)
option(UNROLLED "Use Unrolling Optimizations" ON)
option(OPTIMIZED "Use Extra Optimizations" ON)
option(MEASURE_CYCLES "Measure Cycles" OFF)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(USE_CPU)
    add_compile_definitions(USE_CPU=1)
endif(USE_CPU)
if(USE_GEMMINI)
    add_compile_definitions(USE_GEMMINI=1)
endif(USE_GEMMINI)
if(USE_RVV)
   add_compile_definitions(USE_RVV=1)
endif(USE_RVV)
if(MEMORY)
    add_compile_definitions(MEMORY=1)
endif(MEMORY)
if(UNROLLED)
    add_compile_definitions(UNROLLED=1)
endif(UNROLLED)
if(OPTIMIZED)
    add_compile_definitions(OPTIMIZED=1)
endif(OPTIMIZED)
if(MEASURE_CYCLES)
    add_compile_definitions(MEASURE_CYCLES=1)
endif(MEASURE_CYCLES)

# Add baremetal options
# set(SPECS_FILE "${RISCV_DIR}/riscv64-unknown-elf/lib/htif.specs")
set(RISCV_DIR $ENV{RISCV})
set(WRAP_SPECS_FILE "${RISCV_DIR}/riscv64-unknown-elf/lib/htif_wrap.specs")
set(SPECS_FILE "${RISCV_DIR}/riscv64-unknown-elf/lib/htif_nano.specs")
set(LIBGLOSS_DIR "${RISCV_DIR}/riscv64-unknown-elf/lib/")

# Add optimization flags
set(CMAKE_BUILD_TYPE Debug)
set(BUILD_SHARED_LIBS OFF)
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
set(CMAKE_CXX_FLAGS_DEBUG  "${CMAKE_CXX_FLAGS_DEBUG} -Og")

if(USE_PK)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-common -fno-builtin-printf")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcmodel=medany -march=rv64gcv_zfh -mabi=lp64d -fno-common -fno-builtin-printf")
endif(USE_PK)

set(STATIC_LINKING TRUE)
if(USE_PK)
    set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++")
else()
    # set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++ -Wl,-Map=output.map -L${LIBGLOSS_DIR} -specs=${SPECS_FILE} -T ${CMAKE_SOURCE_DIR}/htif.ld")
    set(CMAKE_EXE_LINKER_FLAGS "-static -lm -lstdc++ -L${LIBGLOSS_DIR} -specs=${SPECS_FILE} -specs=${WRAP_SPECS_FILE} -T ${CMAKE_SOURCE_DIR}/htif.ld")
endif(USE_PK)

if(USE_CPU)
    set(CMAKE_CXX_COMPILER g++)
else()
    if(USE_PK)
        set(CMAKE_CXX_COMPILER riscv64-unknown-linux-gnu-g++)
    else()
        set(CMAKE_CXX_COMPILER riscv64-unknown-elf-g++)
    endif(USE_PK)
endif(USE_CPU)

include_directories(include/Eigen)
include_directories(include/Gemmini)
include_directories(include/RoSE)
include_directories(include/matlib)
include_directories(include/tinympc)
add_subdirectory(src)
add_subdirectory(examples)
add_subdirectory(test)
